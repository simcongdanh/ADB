# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'regmmlive.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QDialog, QApplication
import requests, sys, threading, threaded, random
from ppadb.client import Client as AdbClient
from time import sleep

class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(506, 312)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("E:/SCD/Python/8bcab946fdf981a1895dd54c3ff055d0.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        Dialog.setWindowIcon(icon)
        self.groupBox = QtWidgets.QGroupBox(Dialog)
        self.groupBox.setGeometry(QtCore.QRect(10, 10, 311, 251))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.groupBox.setFont(font)
        self.groupBox.setObjectName("groupBox")
        self.te_id = QtWidgets.QTextEdit(self.groupBox)
        self.te_id.setGeometry(QtCore.QRect(10, 20, 291, 221))
        self.te_id.setObjectName("te_id")
        self.groupBox_2 = QtWidgets.QGroupBox(Dialog)
        self.groupBox_2.setGeometry(QtCore.QRect(330, 10, 161, 251))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.groupBox_2.setFont(font)
        self.groupBox_2.setObjectName("groupBox_2")
        self.label = QtWidgets.QLabel(self.groupBox_2)
        self.label.setGeometry(QtCore.QRect(10, 30, 131, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.te_link = QtWidgets.QTextEdit(self.groupBox_2)
        self.te_link.setGeometry(QtCore.QRect(10, 60, 141, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.te_link.setFont(font)
        self.te_link.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.te_link.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.te_link.setObjectName("te_link")
        self.label_2 = QtWidgets.QLabel(self.groupBox_2)
        self.label_2.setGeometry(QtCore.QRect(10, 100, 131, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.te_api = QtWidgets.QTextEdit(self.groupBox_2)
        self.te_api.setGeometry(QtCore.QRect(10, 130, 141, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.te_api.setFont(font)
        self.te_api.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.te_api.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.te_api.setObjectName("te_api")
        self.btn_reg = QtWidgets.QPushButton(Dialog)
        self.btn_reg.setGeometry(QtCore.QRect(402, 270, 91, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.btn_reg.setFont(font)
        self.btn_reg.setObjectName("btn_reg")
        self.btn_down = QtWidgets.QPushButton(Dialog)
        self.btn_down.setGeometry(QtCore.QRect(300, 270, 91, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.btn_down.setFont(font)
        self.btn_down.setObjectName("btn_down")

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

        self.btn_down.clicked.connect(self.threaddownoad)
        self.btn_reg.clicked.connect(self.run_reg)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Reg mmlive by CongDanh"))
        self.groupBox.setTitle(_translate("Dialog", "Table"))
        self.groupBox_2.setTitle(_translate("Dialog", "Control"))
        self.label.setText(_translate("Dialog", "Link :"))
        self.label_2.setText(_translate("Dialog", "API :"))
        self.btn_reg.setText(_translate("Dialog", "Reg"))
        self.btn_down.setText(_translate("Dialog", "Download"))

    def getnumberid_down(self):
        with open('list.txt') as f:
            x = 0
            for line in f:
                if line.endswith("\n"):
                    line = line[:-1]
                    self.download(line)

    def getnumberid_run(self):
        with open('list.txt') as f:
            x = 0
            for line in f:
                if line.endswith("\n"):
                    line = line[:-1]
                    self.reg(line)

    @threaded.Threaded(started=True)
    def download(self,id):
        client = AdbClient(host="127.0.0.1", port=5037)
        device = client.device(id)
        url = self.te_link.toPlainText()
        device.shell("input tap 65.2 411.1")
        sleep(3)
        device.shell("input tap 310.2 73")
        device.input_text(str(url))
        device.shell("input keyevent 66")
        sleep(8)
        device.shell('input tap 603.7 153.2')

    def getnumber(self):
        url_getnumber = "https://chothuesimcode.com/api?act=number&apik=" + str(self.te_api.toPlainText()) + "&appId=1229&carrier=VNMB&prefix=092"
        getnumber = requests.get(url_getnumber).json()
        resulf_getnumber = getnumber["Result"]
        print(resulf_getnumber)
        self.number = resulf_getnumber["Number"]
        self.id = resulf_getnumber["Id"]
    def get_otp(self, id):
        url_getotp = "https://chothuesimcode.com/api?act=code&apik=" + str(self.te_api.toPlainText()) + "&id=" + str(id)
        getotp = requests.get(url_getotp).json()
        print(getotp)
        resulf_getotp = getotp["Result"]
        otp = resulf_getotp['Code']
        return otp

    @threaded.Threaded(started=True)
    def reg(self,id):
        client = AdbClient(host="127.0.0.1", port=5037)
        device = client.device(id)
        device.shell("input tap 290.9 430")
        sleep(1)
        device.shell("input tap 33.6 81.1")
        sleep(1)
        device.shell("input tap 171.9 595.6")
        sleep(1)
        device.shell("input tap 194.4 582.7")
        sleep(1)
        device.shell("input tap 212.1 243.5")
        sleep(2)
        device.shell("input tap 458.1 1106.9")
        sleep(1)
        device.shell("input tap 458.1 1106.9")
        sleep(8)
        device.shell("input tap 458.1 1106.9")
        sleep(15)
        device.shell("input tap 652.6 1242.0")
        sleep(2)
        device.shell("input tap 652.6 1242.0")
        sleep(2)
        device.shell("input tap 323 277.3")
        sleep(1)
        self.getnumber()
        sleep(2)
        number = self.number
        id = self.id
        while number == None:
            self.getnumber()
            number = self.number
            id = self.id
        else:
            device.input_text("0" + str(number))
        device.shell("input tap 364.8 621.3")
        sleep(10)
        otp = self.get_otp(id)
        while otp == None:
            sleep(5)
            otp = self.get_otp(id)
        else:
            device.input_text(str(otp))
        device.shell("input tap 348.7 542.5")
        sleep(1)
        device.shell("input tap 136.5 486.3")
        sleep(1)
        ho = {
            "Le",
            "Nguyen",
            "Ly",
            "Tran",
            "Trinh",
            "Hoai",
            "Hoang",
            "Phan",
            "Bui",
            "Do",
            "Ho",
            "Ngo",
            "Duong",
            "Huynh",
            "Pham",
            "Vo",
            "Vu",
            "Hoai"
        }
        ten_dem = {
            "van",
            "le",
            "truong",
            "to",
            "tuan",
            "huu",
            "an",
            "anh",
            "gia",
            "hoai",
            "khanh",
            "nhat",
            "minh",
            "bao",
            "cong",
            "duc",
            "dinh",
            "duy",
            "hieu",
            "khai",
            "manh",
            "vy"
        }
        ten = {
            "huan",
            "phat",
            "thien",
            "huu",
            "tien",
            "sieu",
            "ma",
            "tieu",
            "cuong",
            "loi",
            "canh",
            "tue",
            "vu",
            "dat",
            "thanh",
            "cong",
            "kiet",
            "thai",
            "phuong",
            "hoai",
            "khanh",
            "nhat",
            "minh",
            "bao",
            "cong",
            "duc",
            "dinh",
            "khai",
            "manh",
            "vy"
        }
        list_ho = list(ho)
        list_ten_dem = list(ten_dem)
        list_ten = list(ten)
        random_ho = random.choice(list_ho)
        random_ten_dem = random.choice(list_ten_dem)
        random_ten = random.choice(list_ten)
        ten_find = random_ho + random_ten + str(random.randint(1,99))
        device.input_text(str(ten_find))
        sleep(1)
        device.shell("input tap 340.7 714.6")

    def threaddownoad(self):
        t = threading.Thread(target=self.getnumberid_down)
        t.start()
        t.join()

    def run_reg(self):
        t = threading.Thread(target=self.getnumberid_run)
        t.start()
        t.join()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    Dialog = QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
